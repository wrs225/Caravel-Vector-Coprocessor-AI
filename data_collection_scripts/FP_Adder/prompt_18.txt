
Now when I add 1 and 2 it gives me 2.5. Why is this?
ChatGPT

I apologize for the confusion. The issue arises from the way the fractions are being added or subtracted. The fractions are being shifted right, which effectively divides them by 2 for each shift. This is not the correct behavior when the exponents are equal. When the exponents are equal, the fractions should be added or subtracted directly.

Here's the corrected SystemVerilog code:

systemverilog

module fp_addsub (
    input logic [31:0] a,
    input logic [31:0] b,
    input logic subtract,
    output logic [31:0] y
);

    logic [31:0] b_neg;
    logic a_sign, b_sign;
    logic [7:0] a_exp, b_exp;
    logic [23:0] a_frac, b_frac;  // Increase fraction size to 24 bits
    logic y_sign;
    logic [7:0] y_exp;
    logic [23:0] y_frac;  // Increase fraction size to 24 bits

    // Negate b if subtract is high
    assign b_neg = subtract ? {b[31]^1'b1, b[30:0]} : b;

    // Add or subtract
    always_comb begin
        // Extract fields
        a_sign     = a[31];
        b_sign     = b_neg[31];
        a_exp = a[30:23];
        b_exp = b_neg[30:23];
        a_frac = {1'b1, a[22:0]};  // Add implicit leading 1
        b_frac = {1'b1, b_neg[22:0]};  // Add implicit leading 1

        if (a_exp > b_exp) begin
            y_exp = a_exp;
            y_frac = a_frac + (b_frac >> (a_exp - b_exp + 1));  // Adjust for increased fraction size
            y_sign = a_sign;
        end else if (a_exp < b_exp) begin
            y_exp = b_exp;
            y_frac = (a_frac >> (b_exp - a_exp + 1)) + b_frac;  // Adjust for increased fraction size
            y_sign = b_sign;
        end else begin
            y_exp = a_exp;
            y_frac = a_sign ? b_frac - a_frac : a_frac - b_frac;  // No shift when exponents are equal
            y_sign = a_sign;
        end
    end

    // Pack fields into output
    assign y = {y_sign, y_exp, y_frac[22:0]};  // Only take the lower 23 bits of the fraction
endmodule

In this version, when the exponents are equal, the fractions are added or subtracted directly without any shift. This should give the correct result when adding 1.0 and 2.0.
