
In the normalize result section, you set y_frac intermediate to y_frac_intermediate and y_exp = y_exp. Create intermediate values for those
ChatGPT

I see what you're asking for now. You're right, the assignment to y_frac_intermediate and y_exp inside the always_comb block can infer latches. To avoid this, we can use additional intermediate wires to hold the results of the normalization, and then assign these to y_frac and y_exp outside the always_comb block. Here's the corrected version of the code:

systemverilog

module fp_addsub (
    input logic [31:0] a,
    input logic [31:0] b,
    input logic subtract,
    output logic [31:0] y
);

    logic [31:0] b_neg;
    logic a_sign, b_sign;
    logic [7:0] a_exp, b_exp;
    logic [22:0] a_frac, b_frac;
    logic y_sign;
    logic [7:0] y_exp_intermediate, y_exp;
    logic [22:0] y_frac_intermediate, y_frac;

    // Negate b if subtract is high
    assign b_neg = subtract ? {b[31]^1'b1, b[30:0]} : b;

    // Add or subtract
    always_comb begin
        // Extract fields
        a_sign     = a[31];
        b_sign     = b_neg[31];
        a_exp = a[30:23];
        b_exp = b_neg[30:23];
        a_frac = a[22:0];
        b_frac = b_neg[22:0];

        if (a_exp > b_exp) begin
            y_exp_intermediate = a_exp;
            y_frac_intermediate = a_frac + (b_frac >> (a_exp - b_exp));
            y_sign = a_sign;
        end else if (a_exp < b_exp) begin
            y_exp_intermediate = b_exp;
            y_frac_intermediate = (a_frac >> (b_exp - a_exp)) + b_frac;
            y_sign = b_sign;
        end else begin
            y_exp_intermediate = a_exp;
            y_frac_intermediate = a_sign ? b_frac - a_frac : a_frac - b_frac;
            y_sign = a_sign;
        end

        // Normalize result
        if (y_frac_intermediate[22] == 1'b0) begin
            y_frac_intermediate = y_frac_intermediate << 1;
            y_exp_intermediate = y_exp_intermediate - 1;
        end
    end

    // Assign intermediate results to outputs
    assign y_frac = y_frac_intermediate;
    assign y_exp = y_exp_intermediate;

    // Pack fields into output
    assign y = {y_sign, y_exp, y_frac};
endmodule

In this version, additional intermediate wires y_frac_intermediate and y_exp_intermediate are used to hold the results of the normalization. These are then assigned to y_frac and y_exp outside the always_comb block, which avoids the inference of latches.
