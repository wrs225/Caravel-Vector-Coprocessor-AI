User
Please make a queue with this interface:
module queue #(parameter WIDTH = 8, DEPTH = 16) (
    input logic clk,
    input logic reset,

    // Receive interface
    input logic [WIDTH-1:0] recv_msg,
    input logic recv_val,
    output logic recv_rdy,

    // Send interface
    output logic [WIDTH-1:0] send_msg,
    output logic send_val,
    input logic send_rdy
);
ChatGPT

Sure, here is a simple implementation of a queue in SystemVerilog using your interface. This queue is a FIFO (First-In-First-Out) queue.

systemverilog

module queue #(parameter WIDTH = 8, DEPTH = 16) (
    input logic clk,
    input logic reset,

    // Receive interface
    input logic [WIDTH-1:0] recv_msg,
    input logic recv_val,
    output logic recv_rdy,

    // Send interface
    output logic [WIDTH-1:0] send_msg,
    output logic send_val,
    input logic send_rdy
);

    typedef logic [WIDTH-1:0] data_t;
    data_t queue [0:DEPTH-1];
    logic [log2(DEPTH)-1:0] head, tail;
    logic full, empty;

    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            head <= 0;
            tail <= 0;
            full <= 0;
            empty <= 1;
        end else begin
            if (recv_rdy && recv_val && !full) begin
                queue[tail] <= recv_msg;
                tail <= tail + 1;
                if (tail == DEPTH-1)
                    full <= 1;
                empty <= 0;
            end
            if (send_rdy && send_val && !empty) begin
                send_msg <= queue[head];
                head <= head + 1;
                if (head == DEPTH-1)
                    empty <= 1;
                full <= 0;
            end
        end
    end

    assign recv_rdy = !full;
    assign send_val = !empty;

endmodule

This queue implementation uses a circular buffer to store the data. The head and tail pointers indicate where to read and write data, respectively. The full and empty flags are used to indicate whether the queue is full or empty, respectively. The recv_rdy and send_val signals are driven by these flags to indicate whether the queue is ready to receive or send data. The queue updates its state on the rising edge of the clock, and it can be reset by asserting the reset signal.
User
This causes send_val to be high for one additional cycle when it should not be
ChatGPT

You're correct. The send_val signal should only be high when there is valid data to send and the queue is not empty. The issue arises because the send_val signal is directly assigned to the !empty flag, which doesn't account for the case where the queue becomes empty after sending data.

We can fix this by adding a condition to check if the queue is about to become empty after sending data. Here's the corrected code:

systemverilog

module queue #(parameter WIDTH = 8, DEPTH = 16) (
    input logic clk,
    input logic reset,

    // Receive interface
    input logic [WIDTH-1:0] recv_msg,
    input logic recv_val,
    output logic recv_rdy,

    // Send interface
    output logic [WIDTH-1:0] send_msg,
    output logic send_val,
    input logic send_rdy
);

    typedef logic [WIDTH-1:0] data_t;
    data_t queue [0:DEPTH-1];
    logic [log2(DEPTH)-1:0] head, tail;
    logic full, empty;

    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            head <= 0;
            tail <= 0;
            full <= 0;
            empty <= 1;
        end else begin
            if (recv_rdy && recv_val && !full) begin
                queue[tail] <= recv_msg;
                tail <= tail + 1;
                if (tail == DEPTH-1)
                    full <= 1;
                empty <= 0;
            end
            if (send_rdy && send_val && !empty) begin
                send_msg <= queue[head];
                head <= head + 1;
                if (head == tail)
                    empty <= 1;
                full <= 0;
            end
        end
    end

    assign recv_rdy = !full;
    assign send_val = !empty && (head != tail);

endmodule

In this corrected version, the send_val signal is high only when the queue is not empty and the head is not equal to the tail, which means there is valid data to send. This ensures that send_val is not high for an extra cycle after the queue becomes empty.