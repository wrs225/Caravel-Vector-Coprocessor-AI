USER:
I need you to implement a counter in SystemVerilog It needs to have a done output that goes high when the counter reaches a parameterized value. It needs to have an enable signal and a reset.  When the enable signal goes low, the counter should reset

GPT4:
Sure, I can help you implement such a counter in SystemVerilog. You want the counter to reach a parameterized value, have an enable signal, and have a reset. When the enable signal goes low, the counter should reset. Here's an example implementation:

systemverilog

module Counter #(parameter WIDTH = 4, COUNTER_MAX = 2**WIDTH-1) (
    input logic clk,
    input logic enable,
    input logic reset,
    output logic done
);

    logic [WIDTH-1:0] counter;

    always_ff @(posedge clk or negedge reset) begin
        if (!reset)
            counter <= '0;  // Reset the counter when reset signal goes low
        else if (enable)
            counter <= counter + 1;  // Increment the counter if enable is high
    end

    // Check if the counter has reached the maximum value
    assign done = (counter == COUNTER_MAX) ? 1'b1 : 1'b0;

endmodule

In this code:

    Counter is the module with a parameterized width and maximum count value.
    clk is the clock input. The counter increments at the rising edge of the clock signal when the enable signal is high.
    enable is the enable signal. The counter increments if the enable signal is high.
    reset is the reset signal. The counter resets to 0 when the reset signal goes low.
    done is the output signal that goes high when the counter reaches the parameterized maximum value. It is assigned with a ternary operator checking if the counter is equal to the maximum count value.

Please ensure that this implementation suits your specific requirements and timing constraints as design considerations can vary greatly based on the exact application context.

USER:
can you change '0 to 0. can you please also make reset active high? Can you please also expose the counter value?

GPt4:
Absolutely, I can make those adjustments for you.

Here's an updated version of the counter:

systemverilog

module Counter #(parameter WIDTH = 4, COUNTER_MAX = 2**WIDTH-1) (
    input logic clk,
    input logic enable,
    input logic reset,
    output logic [WIDTH-1:0] counter,
    output logic done
);

    always_ff @(posedge clk or posedge reset) begin
        if (reset)
            counter <= 0;  // Reset the counter when reset signal goes high
        else if (enable)
            counter <= counter + 1;  // Increment the counter if enable is high
    end

    // Check if the counter has reached the maximum value
    assign done = (counter == COUNTER_MAX) ? 1'b1 : 1'b0;

endmodule

In this revised code, I made the following changes:

    counter is now an output signal. This lets you monitor the counter value outside of the module.
    The counter resets to 0 (instead of '0) when the reset signal goes high (instead of low). It still increments if the enable signal is high.
    The reset signal is now active high, as per your request.
    As before, the done signal goes high when the counter reaches the parameterized maximum value.

Let me know if you need any more changes.