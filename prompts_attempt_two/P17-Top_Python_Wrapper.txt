User
I have the following Verilog module interface:
module top_module (
    input logic clk,
    input logic reset,

    // Receive interface for load_queue
    input logic [63:0] load_recv_msg,
    input logic load_recv_val,
    output logic load_recv_rdy,

    // Receive interface for instruction_queue
    input logic [31:0] instruction_recv_msg,
    input logic instruction_recv_val,
    output logic instruction_recv_rdy,

    // Send interface for store_queue
    output logic [31:0] store_send_msg,
    output logic store_send_val,
    input logic store_send_rdy
);

Can you please create a python wrapper for a module inspired by this snippet of python I give you?
#=========================================================================
# Choose PyMTL or Verilog version
#=========================================================================
# Set this variable to 'pymtl' if you are using PyMTL for your RTL design
# (i.e., your design is in IntMultFixedLatPRTL) or set this variable to
# 'verilog' if you are using Verilog for your RTL design (i.e., your
# design is in IntMulFixedLatVRTL).

rtl_language = 'verilog'

#-------------------------------------------------------------------------
# Do not edit below this line
#-------------------------------------------------------------------------

# This is the PyMTL wrapper for the corresponding Verilog RTL model.

from pymtl3 import *
from pymtl3.stdlib import stream
from pymtl3.passes.backends.verilog import *

class FFTStageTestHarnessVRTL( VerilogPlaceholder, Component ):

  # Constructor

  def construct( s, BIT_WIDTH = 32, DECIMAL_PT = 16, N_SAMPLES = 8, STAGE_FFT = 0):

    # If translated into Verilog, we use the explicit name

    s.set_metadata( VerilogTranslationPass.explicit_module_name, 'CombinationalFFT_stage' )

    # Interface

    

    s.recv = stream.ifcs.RecvIfcRTL( mk_bits( BIT_WIDTH ) )
    s.send = stream.ifcs.SendIfcRTL( mk_bits( BIT_WIDTH ) )

# See if the course staff want to force testing a specific RTL language
# for their own testing.

import sys
if hasattr( sys, '_called_from_test' ):
  if sys._pymtl_rtl_override:
    rtl_language = sys._pymtl_rtl_override

# Import the appropriate version based on the rtl_language variable

elif rtl_language == 'verilog':
  xbar = FFTStageTestHarnessVRTL
else:
  raise Exception("Invalid RTL language!")
ChatGPT

Sure, I can help you create a Python wrapper for your Verilog module using PyMTL3. Here is a Python wrapper for your top_module:

python

from pymtl3 import *
from pymtl3.stdlib import stream
from pymtl3.passes.backends.verilog import *

class TopModuleVRTL( VerilogPlaceholder, Component ):

  # Constructor

  def construct( s ):

    # If translated into Verilog, we use the explicit name

    s.set_metadata( VerilogTranslationPass.explicit_module_name, 'top_module' )

    # Interface

    s.clk  = InPort ( Bits1 )
    s.reset = InPort ( Bits1 )

    # Receive interface for load_queue
    s.load_recv_msg = InPort ( Bits64 )
    s.load_recv_val = InPort ( Bits1 )
    s.load_recv_rdy = OutPort( Bits1 )

    # Receive interface for instruction_queue
    s.instruction_recv_msg = InPort ( Bits32 )
    s.instruction_recv_val = InPort ( Bits1 )
    s.instruction_recv_rdy = OutPort( Bits1 )

    # Send interface for store_queue
    s.store_send_msg = OutPort( Bits32 )
    s.store_send_val = OutPort( Bits1 )
    s.store_send_rdy = InPort ( Bits1 )

# See if the course staff want to force testing a specific RTL language
# for their own testing.

import sys
if hasattr( sys, '_called_from_test' ):
  if sys._pymtl_rtl_override:
    rtl_language = sys._pymtl_rtl_override

# Import the appropriate version based on the rtl_language variable

elif rtl_language == 'verilog':
  xbar = TopModuleVRTL
else:
  raise Exception("Invalid RTL language!")

This Python wrapper corresponds to your Verilog module. It has the same input and output ports as your Verilog module. The construct method is used to define the interface of the module. The set_metadata method is used to set the explicit name of the Verilog module. The InPort and OutPort classes are used to define the input and output ports of the module, respectively. The BitsN class is used to define the bit width of the ports.
User
Using PyMTL, you can use the following to encapusulate the val_msg_rdy interface as follows:
    s.recv = stream.ifcs.RecvIfcRTL( mk_bits( BIT_WIDTH ) )
    s.send = stream.ifcs.SendIfcRTL( mk_bits( BIT_WIDTH ) )
therefore, you can just change 

    s.load_recv_msg = InPort ( Bits64 )
    s.load_recv_val = InPort ( Bits1 )
    s.load_recv_rdy = OutPort( Bits1 )

to just s.load_recv = stream.ifcs.RecvIfcRTL(Bits64)

Therefore, you do not need instantiate all of the signals for each port. Additionally, clock and reset are implied so you need not include those lines. 
ChatGPT

Yes, you're correct. PyMTL provides a higher level of abstraction with the stream.ifcs.RecvIfcRTL and stream.ifcs.SendIfcRTL interfaces. These interfaces encapsulate the val, msg, and rdy signals into a single interface, which simplifies the code. Here is how your Python wrapper would look with these changes:

python

from pymtl3 import *
from pymtl3.stdlib import stream
from pymtl3.passes.backends.verilog import *

class TopModuleVRTL( VerilogPlaceholder, Component ):

  # Constructor

  def construct( s ):

    # If translated into Verilog, we use the explicit name

    s.set_metadata( VerilogTranslationPass.explicit_module_name, 'top_module' )

    # Interface

    # Receive interface for load_queue
    s.load_recv = stream.ifcs.RecvIfcRTL( Bits64 )

    # Receive interface for instruction_queue
    s.instruction_recv = stream.ifcs.RecvIfcRTL( Bits32 )

    # Send interface for store_queue
    s.store_send = stream.ifcs.SendIfcRTL( Bits32 )

# See if the course staff want to force testing a specific RTL language
# for their own testing.

import sys
if hasattr( sys, '_called_from_test' ):
  if sys._pymtl_rtl_override:
    rtl_language = sys._pymtl_rtl_override

# Import the appropriate version based on the rtl_language variable

elif rtl_language == 'verilog':
  xbar = TopModuleVRTL
else:
  raise Exception("Invalid RTL language!")

This version of the Python wrapper is much cleaner and easier to read. The stream.ifcs.RecvIfcRTL and stream.ifcs.SendIfcRTL interfaces encapsulate the val, msg, and rdy signals into a single interface, which simplifies the code.
User
Remove all of this: # See if the course staff want to force testing a specific RTL language
# for their own testing.

import sys
if hasattr( sys, '_called_from_test' ):
  if sys._pymtl_rtl_override:
    rtl_language = sys._pymtl_rtl_override

# Import the appropriate version based on the rtl_language variable

elif rtl_language == 'verilog':
  xbar = TopModuleVRTL
else:
  raise Exception("Invalid RTL language!")
 and just replace it with topmodule = TopModuleVRTL
ChatGPT

Sure, here is your updated Python wrapper:

python

from pymtl3 import *
from pymtl3.stdlib import stream
from pymtl3.passes.backends.verilog import *

class TopModuleVRTL( VerilogPlaceholder, Component ):

  # Constructor

  def construct( s ):

    # If translated into Verilog, we use the explicit name

    s.set_metadata( VerilogTranslationPass.explicit_module_name, 'top_module' )

    # Interface

    # Receive interface for load_queue
    s.load_recv = stream.ifcs.RecvIfcRTL( Bits64 )

    # Receive interface for instruction_queue
    s.instruction_recv = stream.ifcs.RecvIfcRTL( Bits32 )

    # Send interface for store_queue
    s.store_send = stream.ifcs.SendIfcRTL( Bits32 )

# Instantiate the Verilog module
topmodule = TopModuleVRTL

In this version, we've removed the code that was checking for a specific RTL language and replaced it with a simple instantiation of the TopModuleVRTL class. This assumes that you're always going to be using the Verilog version of your RTL design.
User
Can you please rename the class to TopModule
ChatGPT

Sure, here is your updated Python wrapper with the class name changed to TopModule:

python

from pymtl3 import *
from pymtl3.stdlib import stream
from pymtl3.passes.backends.verilog import *

class TopModule( VerilogPlaceholder, Component ):

  # Constructor

  def construct( s ):

    # If translated into Verilog, we use the explicit name

    s.set_metadata( VerilogTranslationPass.explicit_module_name, 'top_module' )

    # Interface

    # Receive interface for load_queue
    s.load_recv = stream.ifcs.RecvIfcRTL( Bits64 )

    # Receive interface for instruction_queue
    s.instruction_recv = stream.ifcs.RecvIfcRTL( Bits32 )

    # Send interface for store_queue
    s.store_send = stream.ifcs.SendIfcRTL( Bits32 )

# Instantiate the Verilog module
topmodule = TopModule

In this version, the class name has been changed from TopModuleVRTL to TopModule. The instantiation at the end of the script has also been updated to reflect this change.