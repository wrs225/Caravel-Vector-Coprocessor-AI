User
I have the following file:
from pymtl3 import *

def wb_tr( dut, stb, cyc, we, sel, dat, adr):
    dut.wb_rst_i  @= 0
    dut.wbs_stb_i @= stb
    dut.wbs_cyc_i @= cyc
    dut.wbs_we_i  @= we
    dut.wbs_sel_i @= sel
    dut.wbs_dat_i @= dat
    dut.wbs_adr_i @= adr

    # Save the values of dut.wbs_ack_o and dut.wbs_dat_o
    ack = dut.wbs_ack_o
    dat = dut.wbs_dat_o

    dut.sim_tick()

    return ack, dat

def wb_write(dut, address, data, timeout=1000):
    # Start the transaction
    ack, _ = wb_tr(dut, 1, 1, 1, 0xF, data, address)
    # Wait for acknowledgment
    count = 0
    while not ack:
        if count > timeout:
            raise TimeoutError("Timeout waiting for write acknowledgment")
        ack, _ = wb_tr(dut, 1, 1, 1, 0xF, data, address)
        count += 1
    # If ack is high, advance the simulation by one more tick
    if ack:
        dut.sim_tick()
    # End the transaction
    wb_tr(dut, 0, 0, 0, 0, 0, 0)

def wb_read(dut, address, timeout=1000):
    # Start the transaction
    ack, data = wb_tr(dut, 1, 1, 0, 0xF, 0, address)
    # Wait for acknowledgment
    count = 0
    while not ack:
        if count > timeout:
            raise TimeoutError("Timeout waiting for read acknowledgment")
        ack, data = wb_tr(dut, 1, 1, 0, 0xF, 0, address)
        count += 1
    # If ack is high, advance the simulation by one more tick

    # End the transaction
    wb_tr(dut, 0, 0, 0, 0, 0, 0)

    return data
Can you please remove
    if ack:
        dut.sim_tick()
ChatGPT

Sure, here is your code with the line if ack: dut.sim_tick() removed:

python

from pymtl3 import *

def wb_tr( dut, stb, cyc, we, sel, dat, adr):
    dut.wb_rst_i  @= 0
    dut.wbs_stb_i @= stb
    dut.wbs_cyc_i @= cyc
    dut.wbs_we_i  @= we
    dut.wbs_sel_i @= sel
    dut.wbs_dat_i @= dat
    dut.wbs_adr_i @= adr

    # Save the values of dut.wbs_ack_o and dut.wbs_dat_o
    ack = dut.wbs_ack_o
    dat = dut.wbs_dat_o

    dut.sim_tick()

    return ack, dat

def wb_write(dut, address, data, timeout=1000):
    # Start the transaction
    ack, _ = wb_tr(dut, 1, 1, 1, 0xF, data, address)
    # Wait for acknowledgment
    count = 0
    while not ack:
        if count > timeout:
            raise TimeoutError("Timeout waiting for write acknowledgment")
        ack, _ = wb_tr(dut, 1, 1, 1, 0xF, data, address)
        count += 1
    # End the transaction
    wb_tr(dut, 0, 0, 0, 0, 0, 0)

def wb_read(dut, address, timeout=1000):
    # Start the transaction
    ack, data = wb_tr(dut, 1, 1, 0, 0xF, 0, address)
    # Wait for acknowledgment
    count = 0
    while not ack:
        if count > timeout:
            raise TimeoutError("Timeout waiting for read acknowledgment")
        ack, data = wb_tr(dut, 1, 1, 0, 0xF, 0, address)
        count += 1
    # End the transaction
    wb_tr(dut, 0, 0, 0, 0, 0, 0)

    return data

Please note that removing this line means that the simulation will not advance an extra tick when an acknowledgment is received. Make sure this is the intended behavior for your program.
User
Add     
if ack:
        dut.sim_tick() 
to 
wb_read after the while not ack:
ChatGPT

Sure, here is your code with the line if ack: dut.sim_tick() added after the while not ack: loop in the wb_read function:

python

from pymtl3 import *

def wb_tr( dut, stb, cyc, we, sel, dat, adr):
    dut.wb_rst_i  @= 0
    dut.wbs_stb_i @= stb
    dut.wbs_cyc_i @= cyc
    dut.wbs_we_i  @= we
    dut.wbs_sel_i @= sel
    dut.wbs_dat_i @= dat
    dut.wbs_adr_i @= adr

    # Save the values of dut.wbs_ack_o and dut.wbs_dat_o
    ack = dut.wbs_ack_o
    dat = dut.wbs_dat_o

    dut.sim_tick()

    return ack, dat

def wb_write(dut, address, data, timeout=1000):
    # Start the transaction
    ack, _ = wb_tr(dut, 1, 1, 1, 0xF, data, address)
    # Wait for acknowledgment
    count = 0
    while not ack:
        if count > timeout:
            raise TimeoutError("Timeout waiting for write acknowledgment")
        ack, _ = wb_tr(dut, 1, 1, 1, 0xF, data, address)
        count += 1
    # End the transaction
    wb_tr(dut, 0, 0, 0, 0, 0, 0)

def wb_read(dut, address, timeout=1000):
    # Start the transaction
    ack, data = wb_tr(dut, 1, 1, 0, 0xF, 0, address)
    # Wait for acknowledgment
    count = 0
    while not ack:
        if count > timeout:
            raise TimeoutError("Timeout waiting for read acknowledgment")
        ack, data = wb_tr(dut, 1, 1, 0, 0xF, 0, address)
        count += 1
    # If ack is high, advance the simulation by one more tick
    if ack:
        dut.sim_tick()
    # End the transaction
    wb_tr(dut, 0, 0, 0, 0, 0, 0)

    return data

This code will now advance the simulation by one more tick after receiving an acknowledgment in the wb_read function.
User
Include the ack check, but make 
    ack = dut.wbs_ack_o
    dat = dut.wbs_dat_o
deep copies of the values of dut.wbs_ack_o and dat
ChatGPT

In Python, the concept of "deep copy" is typically used with compound objects (like lists or dictionaries) that contain other objects. If you make a deep copy of such an object, changes to the original won't affect the copy and vice versa.

However, in your case, dut.wbs_ack_o and dut.wbs_dat_o seem to be simple data types (probably integers or booleans), not compound objects. For such simple data types, assignment (=) creates a new copy of the value, and changes to the original won't affect the copy. So, you don't need to do anything special to make a "deep copy" of these values.

Here is your code with the ack and dat assignments included:

python

from pymtl3 import *

def wb_tr( dut, stb, cyc, we, sel, dat, adr):
    dut.wb_rst_i  @= 0
    dut.wbs_stb_i @= stb
    dut.wbs_cyc_i @= cyc
    dut.wbs_we_i  @= we
    dut.wbs_sel_i @= sel
    dut.wbs_dat_i @= dat
    dut.wbs_adr_i @= adr

    # Save the values of dut.wbs_ack_o and dut.wbs_dat_o
    ack = dut.wbs_ack_o
    dat = dut.wbs_dat_o

    dut.sim_tick()

    return ack, dat

def wb_write(dut, address, data, timeout=1000):
    # Start the transaction
    ack, _ = wb_tr(dut, 1, 1, 1, 0xF, data, address)
    # Wait for acknowledgment
    count = 0
    while not ack:
        if count > timeout:
            raise TimeoutError("Timeout waiting for write acknowledgment")
        ack, _ = wb_tr(dut, 1, 1, 1, 0xF, data, address)
        count += 1
    # End the transaction
    wb_tr(dut, 0, 0, 0, 0, 0, 0)

def wb_read(dut, address, timeout=1000):
    # Start the transaction
    ack, data = wb_tr(dut, 1, 1, 0, 0xF, 0, address)
    # Wait for acknowledgment
    count = 0
    while not ack:
        if count > timeout:
            raise TimeoutError("Timeout waiting for read acknowledgment")
        ack, data = wb_tr(dut, 1, 1, 0, 0xF, 0, address)
        count += 1
    # If ack is high, advance the simulation by one more tick
    if ack:
        dut.sim_tick()
    # End the transaction
    wb_tr(dut, 0, 0, 0, 0, 0, 0)

    return data

Please note that if dut.wbs_ack_o and dut.wbs_dat_o are not simple data types but rather more complex objects, and you want to make a deep copy of them, you would need to use the copy module's deepcopy function. However, based on the context, it seems unlikely that this is the case.
User
Please use deepcopy. 
ChatGPT

If you want to make a deep copy of dut.wbs_ack_o and dut.wbs_dat_o, you can use the copy module's deepcopy function. Here is your code with these changes:

python

from pymtl3 import *
from copy import deepcopy

def wb_tr( dut, stb, cyc, we, sel, dat, adr):
    dut.wb_rst_i  @= 0
    dut.wbs_stb_i @= stb
    dut.wbs_cyc_i @= cyc
    dut.wbs_we_i  @= we
    dut.wbs_sel_i @= sel
    dut.wbs_dat_i @= dat
    dut.wbs_adr_i @= adr

    # Save the values of dut.wbs_ack_o and dut.wbs_dat_o
    ack = deepcopy(dut.wbs_ack_o)
    dat = deepcopy(dut.wbs_dat_o)

    dut.sim_tick()

    return ack, dat

def wb_write(dut, address, data, timeout=1000):
    # Start the transaction
    ack, _ = wb_tr(dut, 1, 1, 1, 0xF, data, address)
    # Wait for acknowledgment
    count = 0
    while not ack:
        if count > timeout:
            raise TimeoutError("Timeout waiting for write acknowledgment")
        ack, _ = wb_tr(dut, 1, 1, 1, 0xF, data, address)
        count += 1
    # End the transaction
    wb_tr(dut, 0, 0, 0, 0, 0, 0)

def wb_read(dut, address, timeout=1000):
    # Start the transaction
    ack, data = wb_tr(dut, 1, 1, 0, 0xF, 0, address)
    # Wait for acknowledgment
    count = 0
    while not ack:
        if count > timeout:
            raise TimeoutError("Timeout waiting for read acknowledgment")
        ack, data = wb_tr(dut, 1, 1, 0, 0xF, 0, address)
        count += 1
    # If ack is high, advance the simulation by one more tick
    if ack:
        dut.sim_tick()
    # End the transaction
    wb_tr(dut, 0, 0, 0, 0, 0, 0)

    return data

Please note that using deepcopy can be computationally expensive, especially for large objects. Make sure that this is really what you need. If dut.wbs_ack_o and dut.wbs_dat_o are simple data types (like integers or booleans), using deepcopy is unnecessary and can slow down your program.
User
2 / 2
Can you please add this right after the ack, _ under wb_tr in wb_write
    ack = deepcopy(dut.wbs_ack_o)
ChatGPT
3 / 3

Sure, here is your code with the line ack = deepcopy(dut.wbs_ack_o) added right after the ack, _ line in the wb_write function:

python

from pymtl3 import *
from copy import deepcopy

def wb_tr( dut, stb, cyc, we, sel, dat, adr):
    dut.wb_rst_i  @= 0
    dut.wbs_stb_i @= stb
    dut.wbs_cyc_i @= cyc
    dut.wbs_we_i  @= we
    dut.wbs_sel_i @= sel
    dut.wbs_dat_i @= dat
    dut.wbs_adr_i @= adr

    # Save the values of dut.wbs_ack_o and dut.wbs_dat_o
    ack = deepcopy(dut.wbs_ack_o)
    dat = deepcopy(dut.wbs_dat_o)

    dut.sim_tick()

    return ack, dat

def wb_write(dut, address, data, timeout=1000):
    # Start the transaction
    ack, _ = wb_tr(dut, 1, 1, 1, 0xF, data, address)
    ack = deepcopy(dut.wbs_ack_o)
    # Wait for acknowledgment
    count = 0
    while not ack:
        if count > timeout:
            raise TimeoutError("Timeout waiting for write acknowledgment")
        ack, _ = wb_tr(dut, 1, 1, 1, 0xF, data, address)
        count += 1
    # End the transaction
    wb_tr(dut, 0, 0, 0, 0, 0, 0)

def wb_read(dut, address, timeout=1000):
    # Start the transaction
    ack, data = wb_tr(dut, 1, 1, 0, 0xF, 0, address)
    # Wait for acknowledgment
    count = 0
    while not ack:
        if count > timeout:
            raise TimeoutError("Timeout waiting for read acknowledgment")
        ack, data = wb_tr(dut, 1, 1, 0, 0xF, 0, address)
        count += 1
    # If ack is high, advance the simulation by one more tick
    if ack:
        dut.sim_tick()
    # End the transaction
    wb_tr(dut, 0, 0, 0, 0, 0, 0)

    return data

Please note that this change will make a deep copy of dut.wbs_ack_o immediately after the transaction is started in the wb_write function. If dut.wbs_ack_o is a complex object and its state can change during the transaction, this change will ensure that ack reflects the state of dut.wbs_ack_o at the start of the transaction.