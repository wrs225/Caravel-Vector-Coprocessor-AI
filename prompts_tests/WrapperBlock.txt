User
I need a pymtl wrapper of a verilog file with the following interface:
module WrapperBlock (
    input wb_clk_i,
    input wb_rst_i,
    input wbs_stb_i,
    input wbs_cyc_i,
    input wbs_we_i,
    input [3:0] wbs_sel_i,
    input [31:0] wbs_dat_i,
    input [31:0] wbs_adr_i,
    output logic wbs_ack_o,
    output [31:0] wbs_dat_o,
    input logic clk,
    input logic reset
);
ChatGPT

Sure! You can create a PyMTL wrapper for the given Verilog module by defining a PyMTL model that has the same interface as the Verilog module. Below is an example of how you might create a PyMTL wrapper for the given Verilog module.

First, you'll need to import the necessary PyMTL libraries and create a PyMTL model that has the same interface as the Verilog module:

python

from pymtl3 import *
from pymtl3.passes.backends.verilog import *

class WrapperBlock( VerilogPlaceholder, Component ):

  # Constructor
  def construct( s ):

    # Inputs
    s.wb_clk_i  = InPort ( Bits1 )
    s.wb_rst_i  = InPort ( Bits1 )
    s.wbs_stb_i = InPort ( Bits1 )
    s.wbs_cyc_i = InPort ( Bits1 )
    s.wbs_we_i  = InPort ( Bits1 )
    s.wbs_sel_i = InPort ( Bits4 )
    s.wbs_dat_i = InPort ( Bits32 )
    s.wbs_adr_i = InPort ( Bits32 )
    s.clk       = InPort ( Bits1 )
    s.reset     = InPort ( Bits1 )

    # Outputs
    s.wbs_ack_o = OutPort( Bits1 )
    s.wbs_dat_o = OutPort( Bits32 )

    # Verilog source code
    s.add_verilog( f'''
      module WrapperBlock (
          input wb_clk_i,
          input wb_rst_i,
          input wbs_stb_i,
          input wbs_cyc_i,
          input wbs_we_i,
          input [3:0] wbs_sel_i,
          input [31:0] wbs_dat_i,
          input [31:0] wbs_adr_i,
          output logic wbs_ack_o,
          output [31:0] wbs_dat_o,
          input logic clk,
          input logic reset
      );
        // Your Verilog code here
      endmodule
    ''' )

    # Connect the Verilog ports to the PyMTL ports
    s.set_metadata( VerilogPlaceholderPass.params, {
      'connect': {
        'wb_clk_i'  : s.wb_clk_i,
        'wb_rst_i'  : s.wb_rst_i,
        'wbs_stb_i' : s.wbs_stb_i,
        'wbs_cyc_i' : s.wbs_cyc_i,
        'wbs_we_i'  : s.wbs_we_i,
        'wbs_sel_i' : s.wbs_sel_i,
        'wbs_dat_i' : s.wbs_dat_i,
        'wbs_adr_i' : s.wbs_adr_i,
        'wbs_ack_o' : s.wbs_ack_o,
        'wbs_dat_o' : s.wbs_dat_o,
        'clk'       : s.clk,
        'reset'     : s.reset,
      }
    })

This code defines a PyMTL model that wraps the Verilog module and connects the PyMTL ports to the corresponding Verilog ports. You can then instantiate this PyMTL model in your PyMTL simulation or use it as part of a larger PyMTL design.

Make sure to replace the comment // Your Verilog code here with the actual Verilog code for the WrapperBlock module.
User
Remove all of this:
    # Verilog source code
    s.add_verilog( f'''
      module WrapperBlock (
          input wb_clk_i,
          input wb_rst_i,
          input wbs_stb_i,
          input wbs_cyc_i,
          input wbs_we_i,
          input [3:0] wbs_sel_i,
          input [31:0] wbs_dat_i,
          input [31:0] wbs_adr_i,
          output logic wbs_ack_o,
          output [31:0] wbs_dat_o,
          input logic clk,
          input logic reset
      );
        // Your Verilog code here
      endmodule
    ''' )

    # Connect the Verilog ports to the PyMTL ports
    s.set_metadata( VerilogPlaceholderPass.params, {
      'connect': {
        'wb_clk_i'  : s.wb_clk_i,
        'wb_rst_i'  : s.wb_rst_i,
        'wbs_stb_i' : s.wbs_stb_i,
        'wbs_cyc_i' : s.wbs_cyc_i,
        'wbs_we_i'  : s.wbs_we_i,
        'wbs_sel_i' : s.wbs_sel_i,
        'wbs_dat_i' : s.wbs_dat_i,
        'wbs_adr_i' : s.wbs_adr_i,
        'wbs_ack_o' : s.wbs_ack_o,
        'wbs_dat_o' : s.wbs_dat_o,
        'clk'       : s.clk,
        'reset'     : s.reset,
      }
    })
ChatGPT

Certainly! It seems you want to define the PyMTL interface without embedding the Verilog code or connecting the ports. Here's the updated code:

python

from pymtl3 import *

class WrapperBlock( Component ):

  # Constructor
  def construct( s ):

    # Inputs
    s.wb_clk_i  = InPort ( Bits1 )
    s.wb_rst_i  = InPort ( Bits1 )
    s.wbs_stb_i = InPort ( Bits1 )
    s.wbs_cyc_i = InPort ( Bits1 )
    s.wbs_we_i  = InPort ( Bits1 )
    s.wbs_sel_i = InPort ( Bits4 )
    s.wbs_dat_i = InPort ( Bits32 )
    s.wbs_adr_i = InPort ( Bits32 )
    s.clk       = InPort ( Bits1 )
    s.reset     = InPort ( Bits1 )

    # Outputs
    s.wbs_ack_o = OutPort( Bits1 )
    s.wbs_dat_o = OutPort( Bits32 )

    # You can add PyMTL logic here if needed

This code defines the PyMTL interface for the WrapperBlock module without including any Verilog code or connections. You can use this PyMTL model as a starting point for implementing the functionality of the WrapperBlock module in PyMTL, or you can use it as a placeholder for a Verilog module that you plan to connect later using other means.
User
The class needs to inherit VerilogPlaceholder and Component. Outside of the class define a variable as wrapperblock = WrapperBlock
ChatGPT

Certainly! Here's the updated code that includes the inheritance from VerilogPlaceholder and defines the variable wrapperblock outside of the class:

python

from pymtl3 import *
from pymtl3.passes.backends.verilog import *

class WrapperBlock( VerilogPlaceholder, Component ):

  # Constructor
  def construct( s ):

    # Inputs
    s.wb_clk_i  = InPort ( Bits1 )
    s.wb_rst_i  = InPort ( Bits1 )
    s.wbs_stb_i = InPort ( Bits1 )
    s.wbs_cyc_i = InPort ( Bits1 )
    s.wbs_we_i  = InPort ( Bits1 )
    s.wbs_sel_i = InPort ( Bits4 )
    s.wbs_dat_i = InPort ( Bits32 )
    s.wbs_adr_i = InPort ( Bits32 )
    s.clk       = InPort ( Bits1 )
    s.reset     = InPort ( Bits1 )

    # Outputs
    s.wbs_ack_o = OutPort( Bits1 )
    s.wbs_dat_o = OutPort( Bits32 )

# Define the variable outside of the class
wrapperblock = WrapperBlock()

This code defines the WrapperBlock class that inherits from both VerilogPlaceholder and Component, and it also defines a variable wrapperblock that is an instance of the WrapperBlock class. You can use this variable to refer to the WrapperBlock instance in other parts of your code.
User
Remove () after WrapperBlock, as we are not initializing an instance but passing a reference to the definition
ChatGPT

Certainly! Here's the corrected code:

python

from pymtl3 import *
from pymtl3.passes.backends.verilog import *

class WrapperBlock( VerilogPlaceholder, Component ):

  # Constructor
  def construct( s ):

    # Inputs
    s.wb_clk_i  = InPort ( Bits1 )
    s.wb_rst_i  = InPort ( Bits1 )
    s.wbs_stb_i = InPort ( Bits1 )
    s.wbs_cyc_i = InPort ( Bits1 )
    s.wbs_we_i  = InPort ( Bits1 )
    s.wbs_sel_i = InPort ( Bits4 )
    s.wbs_dat_i = InPort ( Bits32 )
    s.wbs_adr_i = InPort ( Bits32 )
    s.clk       = InPort ( Bits1 )
    s.reset     = InPort ( Bits1 )

    # Outputs
    s.wbs_ack_o = OutPort( Bits1 )
    s.wbs_dat_o = OutPort( Bits32 )

# Define the variable outside of the class
wrapperblock = WrapperBlock

Now, wrapperblock is a reference to the class definition itself, rather than an instance of the class. Thank you for pointing that out!
User
remove the clock and reset definitions, as they are implied
ChatGPT

Certainly! The clock and reset signals are often implicit in hardware descriptions, so you can omit them from the PyMTL interface. Here's the updated code:

python

from pymtl3 import *
from pymtl3.passes.backends.verilog import *

class WrapperBlock( VerilogPlaceholder, Component ):

  # Constructor
  def construct( s ):

    # Inputs
    s.wb_clk_i  = InPort ( Bits1 )
    s.wb_rst_i  = InPort ( Bits1 )
    s.wbs_stb_i = InPort ( Bits1 )
    s.wbs_cyc_i = InPort ( Bits1 )
    s.wbs_we_i  = InPort ( Bits1 )
    s.wbs_sel_i = InPort ( Bits4 )
    s.wbs_dat_i = InPort ( Bits32 )
    s.wbs_adr_i = InPort ( Bits32 )

    # Outputs
    s.wbs_ack_o = OutPort( Bits1 )
    s.wbs_dat_o = OutPort( Bits32 )

# Define the variable outside of the class
wrapperblock = WrapperBlock

I've removed the definitions for the clk and reset signals, as they are implied.